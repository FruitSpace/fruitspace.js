import { GhostClient } from "./fruitspace";
var Spinner = require('cli-spinner').Spinner;
import chalk from 'chalk';

const ghostClientx = new GhostClient('000S');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
function updateLine(newText: string) {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
    process.stdout.clearLine(0);
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
    process.stdout.cursorTo(0);
    // –ü–∏—à–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    process.stdout.write(newText);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function stopProgressBar(spinner: any) {
    spinner.stop(true); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫—É
    process.stdout.clearLine(0); // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    process.stdout.cursorTo(0); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
}

async function commentList(id: number) {
    var spinner = new Spinner("–ñ–¥–µ–º GhostCore...");
    spinner.setSpinnerString(27);
    spinner.start(); // –ó–∞–ø—É—Å–∫ —Å–ø–∏–Ω–Ω–µ—Ä–∞

    try {
        const response = await ghostClientx.comments.getAccountComments(id);
        const username = await ghostClientx.users.getUserInfo(id).then(r => { return r["user"]["uname"].toLowerCase(); });

        stopProgressBar(spinner); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

        if (response["comments"] && Array.isArray(response["comments"])) {
            console.log(chalk.green(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`));
            response["comments"].forEach((comment: any, index: number) => {
                console.log(chalk.blue(`[${index + 1}]`), comment); // –í—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            });
        } else {
            console.log(chalk.red("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã."));
        }
    } catch (error) {
        stopProgressBar(spinner); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        console.error(chalk.red("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", error));
    }
}

async function levelsList(search: string | null) {
    var spinner = new Spinner("–ñ–¥–µ–º GhostCore...");
    spinner.setSpinnerString(27);
    spinner.start(); // –ó–∞–ø—É—Å–∫ —Å–ø–∏–Ω–Ω–µ—Ä–∞
    try {
        const response = await ghostClientx.levels.getLevels(search);
        stopProgressBar(spinner)
        console.log(response)
    }catch (e) {
        return chalk.red("! " + e);
    }
}

const notes = {
    1: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
}

// –°–Ω–æ—Å–∫–∞
function note(noteId: number) {
    if (noteId in notes) {
        return chalk.red(" *");
    } else {
        console.log(chalk.red("[!!!] Note is not defined in notes"));
    }
}

function noteExpose(noteId: number) {
    if (noteId in notes) {
        // @ts-ignore
        return chalk.red("! [*] ") + chalk.yellow("- " + notes[noteId]);
    } else {
        console.log(chalk.red("[!!!] Note is not defined in notes"));
    }
}

// –õ–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã
const logo = `
  _____                    ____  ____  _  _______                           _      
 |  ___| __ _   _  ___ ___/ ___||  _ \\| |/ / ____|_  ____ _ _ __ ___  _ __ | | ___ 
 | |_ | '__| | | |/ __/ _ \\___ \\| | | | ' /|  _| \\ \\/ / _\` | '_ \` _ \\| '_ \\| |/ _ \\
 |  _|| |  | |_| | (_|  __/___) | |_| | . \\| |___ >  < (_| | | | | | | |_) | |  __/
 |_|  |_|   \\__,_|\\___\\___|____/|____/|_|\\_\\_____/_/\\_\\__,_|_| |_| |_| .__/|_|\\___|
                                                                     |_|           
`;

function showMenu() {
    console.clear(); // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    console.log(chalk.magentaBright(logo));
    console.log("üëã –ú–∏–Ω–∏-–ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã FruitSpace SDK –Ω–∞ Node.js (JavaScript)");
    console.log(chalk.blueBright("- [1] –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"));
    console.log(chalk.blueBright("- [2] –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π") + note(1));
    console.log(chalk.blueBright("- [3] –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–Ω–∏"));
    console.log(noteExpose(1));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function construct(action: string) {
    switch (action) {
        case "userComments":
            updateLine(chalk.cyan("- [‚ö°] –í–≤–µ–¥–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\x1b[32m")); // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
            const accId = prompt(""); // –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            commentList(Number(accId));
            break;
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
        case "levels":
            updateLine(chalk.cyan("- [‚ö°] –í–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å")); // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
            const search = prompt(""); // –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            levelsList(search);
            break
    }
}

// –ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã
showMenu(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
const choice = prompt("\n- [‚ö°] > "); // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

switch (choice) {
    case "1":
        construct("userComments");
        break;
    case "3":
        construct("levels")
        break
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ case –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
}
